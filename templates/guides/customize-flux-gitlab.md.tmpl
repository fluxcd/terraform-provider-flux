---
subcategory: ""
page_title: "Customize Flux with GitLab"
description: |-
  Customizing Flux past the exposed parameters.
---

# Customize Flux with GitLab

The Flux datasources expose a set of parameters that can configure the controller deployment. These parameters include all of those
exposed by the `flux bootstrap` CLI command. There may be situations where these parameters are not enough and additional configuration
has to be done. This could be changing the resource requests or limits for a controller, adding annotations or labels, or modifying container settings.

When deploying Flux with the CLI the recommended solution is to [modify the Kustomization file](https://fluxcd.io/docs/installation/#customize-flux-manifests).
When using terraform to bootstrap flux, the `flux_sync` data source provides a `patch_names` argument and corresponding `patch_file_paths` output value that allow users to provide patches to the `kustomize.yaml` in the same manner.

This guide assumes that you have setup Flux with Terraform already. Follow the [GitLab guide](./gitlab) for a quick example to get a Kubernetes cluster with Flux installed in it.

The following template file, `psp-patch.tftpl`,  will set PSP rules for all of the Flux deployments in the flux-system namespace.

{{ tffile "examples/customize-flux-gitlab/psp-patch.tftpl" }}

The template file can then be use to in terraform using the `templatefile` function (alternatively it could be declared directly in terraform using heredoc syntax)
and used as the `content` of a `gitlab_repository_file`. The `kustomize.yaml` content will be generated by the `flux_sync` data source to include patch
files, using a `patchesStrategicMerge`.

Using the `patch_file_paths` output value of `sync_flux`, we can commit the content of each patch to its own file in git. This allows us to implement
small patches that do one thing, in line with the recommendation from the [kustomize docs](https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/#customizing).


In the example configuration below, we load `psp-patch.tftpl` from the local filesystem.

```terraform
terraform {
  required_version = ">= 0.13"

  required_providers {
    gitlab = {
      source  = "gitlabhq/gitlab"
      version = ">= 3.11.1"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = ">= 2.0.2"
    }
    kubectl = {
      source  = "gavinbunney/kubectl"
      version = ">= 1.10.0"
    }
    flux = {
      source  = "fluxcd/flux"
      version = ">= 0.11.0"
    }
    tls = {
      source  = "hashicorp/tls"
      version = "3.1.0"
    }
  }
}

locals {
  # Apply patch to each of the following deployments
  deployments = ["helm-controller", "kustomize-controller", "notification-controller", "source-controller"]
  patches = {
    for resource_name in local.deployments : resource_name => yamldecode(templatefile("./psp-patch.tftpl", {
      deployment_name = "${resource_name}"
    }))
  }
}

data "flux_sync" "main" {
  target_path = var.target_path
  url         = "ssh://git@gitlab.com/${var.gitlab_owner}/${var.repository_name}.git"
  branch      = var.branch
  patch_names = keys(local.patches)
}

# Create kustomize.yaml
resource "gitlab_repository_file" "kustomize" {
  project        = gitlab_project.main.id
  branch         = gitlab_project.main.default_branch
  file_path      = data.flux_sync.main.kustomize_path
  content        = base64encode(data.flux_sync.main.kustomize_content)
  commit_message = "Add ${data.flux_sync.main.kustomize_path}"

  depends_on = [gitlab_repository_file.sync]
}

resource "gitlab_repository_file" "patches" {
  for_each = data.flux_sync.main.patch_file_paths

  project        = gitlab_project.main.id
  file_path      = each.value
  content        = yamlencode(local.patches[each.key])
  branch         = var.branch
  commit_message = "Add ${each.key}"
}


```

The following `kustomize.yaml` will be generated by the`flux_sync` data source, where the names of the patch files
to include are generated from the `patch_names` argument. This is created in git by `gitlab_repository_file.kustomize`.

```yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- gotk-sync.yaml
- gotk-components.yaml
patchesStrategicMerge:
- patch-notification-controller.yaml
- patch-kustomize-controller.yaml
- patch-source-controller.yaml
- patch-helm-controller.yaml
```

